{"version":3,"sources":["components/Cell/Cell.module.css","components/Clues/Clues.module.css","components/CellGrid/CellGrid.module.css","App.module.css","components/X/X.module.css","components/Game/Game.module.css","models/CellValue.ts","helpers/helpers.ts","models/ClickType.ts","helpers/puzzleEncoder.ts","models/GameArr.ts","models/Puzzle.ts","resources/puzzles.ts","models/Edge.ts","helpers/getNewVal.ts","components/X/index.tsx","components/X/X.tsx","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","components/Clues/ColClues.tsx","components/Clues/RowClues.tsx","components/GridPreview/GridPreview.tsx","components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Cell","selectUnknown","selectEmpty","selectBlack","clickable","Unknown","Empty","Black","top","bottom","left","right","ColClues","RowClues","CellGrid","isSolved","row","App","AppHeader","X","Game","CellValue","isWithin","lim1","lim2","n","ClickType","nToSymbol","String","fromCharCode","symbolToN","s","charCodeAt","splitToLen","str","len","regExp","RegExp","concat","match","binTo64","b","length","Error","parseInt","encodePuzzleArr","binArr","rows","cols","bin","nearest6","Math","ceil","fullBin","padStart","map","join","fromBin","arr","val","decodePuzzleArr","b64","_b64$slice$split$map","slice","split","_b64$slice$split$map2","Object","slicedToArray","c","toString","toSixBitBinary","duplicateArr","r","toConsumableArray","Puzzle","p","classCallCheck","this","name","clues","Array","isArray","puzzle","buildClues","rowClues","cluesForLine","colClues","_","i","cluesForCol","col","line","push","num","borrowed","original","puzzles","Edge","getNewVal","currentVal","clickType","newVal","console","debug","react_default","a","createElement","className","styles","viewBox","d","React","memo","_ref","coord","value","handleMouseDown","handleMouseOver","selected","newValClass","cellClassNames","classNames","defineProperty","e","useEffect","count","draggable","onDragStart","preventDefault","onMouseDown","ev","onMouseOver","onContextMenu","components_X","_classNames","gameArr","setGameArr","_useState","useState","_useState2","mouseDown","setMouseDown","_useState3","_useState4","mouseOver","setMouseOver","_useState5","_useState6","setNewVal","time","timeEnd","button","handleMouseUp","newArr","coord1","coord2","_sort","sort","_sort2","minR","maxR","_sort3","_sort4","minC","maxC","updateGameArrRange","getSelectedEdges","_ref4","_ref5","edges","_ref2","_ref3","isSelected","_ref6","min","max","_ref7","topRow","leftCol","bottomRow","rightCol","cells","ri","key","ci","Cell_Cell","onMouseUp","onMouseLeave","clue","cluei","GridPreview","CREATE_MODE","fill","floor","random","randElement","pVal","hasErrors","log","tabIndex","onKeyPress","components_GridPreview_GridPreview","Clues_ColClues","Clues_RowClues","components_CellGrid_CellGrid","components_Game_Game","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.222297e4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__JGzUO\",\"selectUnknown\":\"Cell_selectUnknown__1Bym8\",\"selectEmpty\":\"Cell_selectEmpty__35FUd\",\"selectBlack\":\"Cell_selectBlack__V-G-D\",\"clickable\":\"Cell_clickable__3ZAG9\",\"Unknown\":\"Cell_Unknown__3USQO\",\"Empty\":\"Cell_Empty__2sjFK\",\"Black\":\"Cell_Black__ecr59\",\"top\":\"Cell_top__2Gyux\",\"bottom\":\"Cell_bottom__1G-3X\",\"left\":\"Cell_left__1cuDS\",\"right\":\"Cell_right__lVBPk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColClues\":\"Clues_ColClues__2Romi\",\"RowClues\":\"Clues_RowClues__1Qm5X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellGrid\":\"CellGrid_CellGrid__8cfMJ\",\"isSolved\":\"CellGrid_isSolved__vCLhI\",\"row\":\"CellGrid_row__2jJyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"AppHeader\":\"App_AppHeader__2Hhu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"X\":\"X_X__25fxN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2P9KR\"};","enum CellValue {\n  Unknown = -1,\n  Empty = 0,\n  Black = 1,\n}\n\nexport default CellValue;\n","export const isWithin = (lim1: number, lim2: number, n: number): boolean =>\n  lim1 < lim2 ? lim1 <= n && n <= lim2 : lim2 <= n && n <= lim1;\n\nexport const randInt = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const randElement = <T>(a: T[]): T => a[randInt(0, a.length - 1)];\n","enum ClickType {\n  left,\n  middle,\n  right,\n}\n\nexport default ClickType;\n","import CellValue from '../models/CellValue';\nimport { GameArr } from '../models/GameArr';\nimport { PuzzleArr } from '../models/Puzzle';\n\nconst nToSymbol = (n: number): string => String.fromCharCode(n + 383);\nconst symbolToN = (s: string): number => s.charCodeAt(0) - 383;\n\nconst splitToLen = (str: string, len: number): string[] => {\n  const regExp = new RegExp(`.{1,${len}}`, 'g');\n  const arr = str.match(regExp);\n  return arr || [str];\n};\n\nconst binTo64 = (b: string): string => {\n  if (b.length > 6) {\n    throw new Error(`String \"${b}\" is more than 6 digits, cannot parse to num 0-63.`);\n  }\n  return nToSymbol(parseInt(b, 2));\n};\n\nconst toSixBitBinary = (n: number): string => {\n  if (n < 0 || n >= 64) {\n    throw new Error('Number must be 0 - 63');\n  }\n  return n.toString(2).padStart(6, '0');\n};\n\nconst fromBin = (bin: string) => {\n  const len = bin.length;\n  const nearest6 = Math.ceil(len / 6) * 6;\n  const fullBin = bin.padStart(nearest6, '0');\n  const encoded = splitToLen(fullBin, 6)\n    .map(binTo64)\n    .join('');\n\n  return encoded;\n};\n\nexport const encodePuzzleArr = (binArr: GameArr): string => {\n  const rows = binArr.length;\n  const cols = binArr[0].length;\n  const binStr = binArr\n    .map(arr => arr.map(val => (val === CellValue.Unknown ? CellValue.Empty : val)).join(''))\n    .join('');\n  return fromBin(binStr) + nToSymbol(rows) + nToSymbol(cols);\n};\n\nexport const decodePuzzleArr = (b64: string): PuzzleArr => {\n  const [rows, cols] = b64\n    .slice(-2)\n    .split('')\n    .map(symbolToN);\n  const str = b64\n    .slice(0, b64.length - 2)\n    .split('')\n    .map(c => toSixBitBinary(symbolToN(c)))\n    .join('')\n    .slice(-1 * rows * cols);\n  return splitToLen(str, rows).map(s => s.split('').map(n => +n as (0 | 1)));\n};\n","import { CREATE_MODE } from '../components/Game/Game';\nimport CellValue from './CellValue';\nimport Coord from './Coord';\nimport Puzzle from './Puzzle';\n\nexport type GameArr = CellValue[][];\n\nexport const duplicateArr = (arr: GameArr): GameArr => arr.map(r => [...r]);\n\nexport const updateGameArrCell = (arr: GameArr, [r, c]: Coord, val: CellValue): GameArr => {\n  const newArr = duplicateArr(arr);\n  newArr[r][c] = val;\n  return newArr;\n};\n\nexport const updateGameArrRange = (arr: GameArr, coord1: Coord, coord2: Coord, val: CellValue): GameArr => {\n  const [minR, maxR] = [coord1[0], coord2[0]].sort((a, b) => a - b);\n  const [minC, maxC] = [coord1[1], coord2[1]].sort((a, b) => a - b);\n  const newArr = duplicateArr(arr);\n  for (let r = minR; r <= maxR; r++) {\n    for (let c = minC; c <= maxC; c++) {\n      if (arr[r][c] === CellValue.Unknown || val === CellValue.Unknown) {\n        newArr[r][c] = val;\n      }\n    }\n  }\n  return newArr;\n};\n\nexport const hasErrors = (arr: GameArr, puzzle: Puzzle): boolean => {\n  if (CREATE_MODE) return true;\n  for (let r = 0; r < arr.length; r++) {\n    for (let c = 0; c < arr[r].length; c++) {\n      const val = arr[r][c];\n      const pVal = puzzle.arr[r][c];\n      if ((pVal === CellValue.Black || val === CellValue.Black) && val !== pVal) return true;\n    }\n  }\n  return false;\n};\n\nexport const blankGameArrForPuzzle = (puzzle: Puzzle): GameArr => puzzle.arr.map(r => r.map(c => CellValue.Unknown));\n\nexport const blankGameArrFromDimensions = (rows: number, cols: number): GameArr =>\n  new Array(rows).fill(null).map(r => new Array(cols).fill(CellValue.Unknown));\n","import { decodePuzzleArr } from '../helpers/puzzleEncoder';\nimport { StoredPuzzle } from '../resources/puzzles';\nimport CellValue from './CellValue';\nimport GameClues from './GameClues';\n\nexport type PuzzleArr = (CellValue.Empty | CellValue.Black)[][];\n\nclass Puzzle {\n  arr: PuzzleArr;\n  name: string;\n  clues: GameClues;\n\n  constructor(p: StoredPuzzle | PuzzleArr) {\n    if (Array.isArray(p)) {\n      this.arr = p;\n      this.name = 'unknown';\n    } else {\n      this.arr = decodePuzzleArr(p.puzzle);\n      this.name = p.name;\n    }\n    this.clues = Puzzle.buildClues(this.arr);\n  }\n\n  private static buildClues(arr: PuzzleArr): GameClues {\n    const rowClues: number[][] = arr.map(row => Puzzle.cluesForLine(row));\n    const colClues: number[][] = arr[0].map((_, i) => Puzzle.cluesForCol(arr, i));\n    return { rowClues: rowClues, colClues: colClues };\n  }\n\n  private static cluesForCol(arr: PuzzleArr, col: number): number[] {\n    let line: CellValue[] = [];\n    for (let row = 0; row < arr.length; row++) {\n      line.push(arr[row][col]);\n    }\n    return this.cluesForLine(line);\n  }\n\n  private static cluesForLine(line: CellValue[]) {\n    const clues: number[] = [];\n\n    for (let i = 0; i < line.length; i++) {\n      let num = 0;\n      while (!num && line[i] === CellValue.Empty) {\n        i++;\n      }\n      while (line[i] === CellValue.Black) {\n        num++;\n        i++;\n      }\n      if (num) {\n        clues.push(num);\n      }\n    }\n    return clues;\n  }\n}\n\nexport default Puzzle;\n","export type StoredPuzzle = {\n  name: string;\n  puzzle: string;\n};\n\nconst p = (name: string, puzzle: string): StoredPuzzle => ({ name, puzzle });\n\nconst borrowed: StoredPuzzle[] = [\n  // p('pi', 'ƀƼƑƤƊƄƄ'),\n  // p('house', 'ſƐƶƹƶƄƄ'),\n  // p('heart', 'ƀƮƾƶƃƄƄ'),\n  // p('arrow', 'ſƐƆƳƃƄƄ'),\n  // p('skull', 'ſƺƼƞƩƄƄ'),\n  // p('plane', 'ſƒƾƱƍƄƄ'),\n  // p('cross', 'ſƺƛƜƭƄƄ'),\n  // p('tower', 'ƀƖƺƤƍƄƄ'),\n  // p('hourglass', 'ƀƼƐƆƞƄƄ'),\n  // p('shuriken', 'ƀƎƱƦƸƄƄ'),\n  // p('leaf', 'ſƾƄƓƴƤƙƔƸƗƦƽƇƐƝƋſƉƉ'),\n  // p('music', 'ſƎƆƃƐưƸƃƃƐƶƎƻƾưƥſƉƉ'),\n  p('tapir', 'ƎƾƯſſƾſſƞƷſƎƽƗƂƸƽƀƼƮſƞƮƷƎƾƾƂƾƾƯƾƽƻƎƶƾƂƼƾƯƞƮƻƾƼƾƸƲƢƻƛƷƞƆƍƂưƲƟƻƛƷƎƦƮſƓƓ'),\n];\n\nconst original: StoredPuzzle[] = [p('smiley', 'ſƨƏƇƭƄƄ'), p('vampire', 'ƆƺƾƥƘƦƦƞƢƯƣƇƇ')];\n\nconst puzzles = [...borrowed, ...original];\n\nexport default puzzles;\nconst cohenStory = `\nsat down\nfiretrucks spraying\nbrody's cousins riding on motorcycles\nparade floats - one had brody's cousins holding signs showing ancestors\ngot popsicles and chips and candy \n`;\n","enum Edge {\n  top,\n  bottom,\n  left,\n  right,\n}\nexport default Edge;\n","import CellValue from '../models/CellValue';\nimport ClickType from '../models/ClickType';\n\nconst getNewVal = (currentVal: CellValue, clickType: ClickType): CellValue | null => {\n  if (clickType !== ClickType.left && clickType !== ClickType.right) return null;\n  let newVal: CellValue;\n  if (clickType === ClickType.left) {\n    newVal = currentVal === CellValue.Unknown ? CellValue.Black : CellValue.Unknown;\n  } else {\n    newVal = currentVal === CellValue.Unknown ? CellValue.Empty : CellValue.Unknown;\n  }\n  console.debug(clickType, currentVal, newVal);\n\n  return newVal;\n};\n\nexport default getNewVal;\n","import X from './X';\n\nexport default X;","import React from 'react';\n\nimport styles from './X.module.css';\n\nconst X: React.FC = () => {\n  return (\n    <svg className={styles.X} viewBox=\"0 0 100 100\">\n      <path d=\"M 7,7 L 93,93 M 93,7 L 7,93\" />\n    </svg>\n  );\n};\n\nexport default X;\n","import classNames from 'classnames';\nimport React, { MouseEventHandler, useEffect } from 'react';\n\nimport CellValue from '../../models/CellValue';\nimport Coord from '../../models/Coord';\nimport Edge from '../../models/Edge';\nimport X from '../X';\nimport styles from './Cell.module.css';\n\ntype CellProps = {\n  handleMouseDown: (ev: React.MouseEvent, coord: Coord) => void;\n  handleMouseOver: (ev: React.MouseEvent, coord: Coord) => void;\n  coord: Coord;\n  selected: Edge[];\n\n  newVal: CellValue | null;\n\n  clickable: boolean;\n  value: CellValue;\n};\n\nconst Cell = React.memo(\n  ({ coord, clickable, value, handleMouseDown, handleMouseOver, selected, newVal }: CellProps) => {\n    const newValClass = newVal !== null ? styles['select' + CellValue[newVal]] : '';\n    const cellClassNames = classNames(\n      { [styles.clickable]: clickable },\n      newValClass,\n      selected.map(e => styles[Edge[e]]),\n      styles.Cell\n    );\n    useEffect(coord[0] === 0 && coord[1] === 0 ? () => console.count('Cell rerender') : () => {}, [handleMouseDown]);\n\n    const handleContextMenu: MouseEventHandler = ev => {\n      ev.preventDefault();\n      handleMouseDown(ev, coord);\n    };\n\n    return (\n      <div draggable={false} className={cellClassNames}>\n        <div\n          onDragStart={e => e.preventDefault()}\n          draggable={false}\n          className={styles[CellValue[value]]}\n          onMouseDown={ev => handleMouseDown(ev, coord)}\n          onMouseOver={ev => handleMouseOver(ev, coord)}\n          onContextMenu={handleContextMenu}\n        >\n          {value === CellValue.Empty && <X />}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Cell;\n","import classNames from 'classnames';\nimport React, { MouseEventHandler, useEffect, useState } from 'react';\n\nimport getNewVal from '../../helpers/getNewVal';\nimport { isWithin } from '../../helpers/helpers';\nimport CellValue from '../../models/CellValue';\nimport Coord from '../../models/Coord';\nimport Edge from '../../models/Edge';\nimport { GameArr, updateGameArrRange } from '../../models/GameArr';\nimport Cell from '../Cell/Cell';\nimport styles from './CellGrid.module.css';\n\ntype CellGridProps = {\n  gameArr: GameArr;\n  setGameArr: (arg0: GameArr) => void;\n  isSolved: boolean;\n};\n\n// puzzle solution progress\nconst CellGrid = ({ gameArr, setGameArr, isSolved }: CellGridProps) => {\n  const [mouseDown, setMouseDown] = useState(null as (Coord | null));\n  const [mouseOver, setMouseOver] = useState(null as Coord | null);\n  const [newVal, setNewVal] = useState(null as CellValue | null);\n  console.time('blah');\n  useEffect(() => {\n    console.timeEnd('blah');\n  });\n\n  const handleMouseDown = (ev: React.MouseEvent, coord: Coord): void => {\n    if (isSolved) return;\n    // console.debug('down', coord, ev.target);\n    setMouseDown(coord);\n    setNewVal(getNewVal(gameArr[coord[0]][coord[1]], ev.button));\n  };\n\n  const handleMouseUp: MouseEventHandler = ev => {\n    if (newVal !== null && mouseDown !== null) {\n      const newArr = updateGameArrRange(gameArr, mouseDown, mouseOver || mouseDown, newVal);\n      setGameArr(newArr);\n    }\n    setMouseDown(null);\n    setMouseOver(null);\n  };\n\n  const handleMouseOver = (ev: React.MouseEvent, coord: Coord): void => {\n    if (!mouseDown) return;\n    setMouseOver(coord);\n    console.debug('over', coord);\n  };\n\n  const isSelected = ([row, col]: Coord): boolean => {\n    if (!mouseDown) return false;\n    if (!mouseOver) return row === mouseDown[0] && col === mouseDown[1];\n    return isWithin(mouseDown[0], mouseOver[0], row) && isWithin(mouseDown[1], mouseOver[1], col);\n  };\n\n  const getSelectedEdges = ([row, col]: Coord): Edge[] => {\n    let edges: Edge[] = [];\n    if (!mouseDown || !isSelected([row, col])) return edges;\n    const [topRow, leftCol, bottomRow, rightCol] = mouseOver\n      ? [\n          Math.min(mouseDown[0], mouseOver[0]),\n          Math.min(mouseDown[1], mouseOver[1]),\n          Math.max(mouseDown[0], mouseOver[0]),\n          Math.max(mouseDown[1], mouseOver[1]),\n        ]\n      : [mouseDown[0], mouseDown[1], mouseDown[0], mouseDown[1]];\n    if (row === topRow) edges.push(Edge.top);\n    if (col === leftCol) edges.push(Edge.left);\n    if (row === bottomRow) edges.push(Edge.bottom);\n    if (col === rightCol) edges.push(Edge.right);\n    return edges;\n  };\n\n  const cells = gameArr.map((r, ri) => (\n    <div className={styles.row} key={r.toString() + ri}>\n      {r.map((c, ci) => (\n        <Cell\n          coord={[ri, ci]}\n          newVal={newVal}\n          clickable={!isSolved}\n          handleMouseDown={handleMouseDown}\n          handleMouseOver={handleMouseOver}\n          value={isSolved && c === CellValue.Empty ? CellValue.Unknown : c}\n          selected={getSelectedEdges([ri, ci])}\n          key={`${ri},${ci}`}\n        />\n      ))}\n    </div>\n  ));\n\n  return (\n    <div\n      className={classNames({ [styles.CellGrid]: true, [styles.isSolved]: isSolved })}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}\n    >\n      {cells}\n    </div>\n  );\n};\n\nexport default CellGrid;\n","import React from 'react';\n\nimport styles from './Clues.module.css';\n\ntype ColCluesProps = {\n  clues: number[][];\n};\n\nconst ColClues = ({ clues }: ColCluesProps) => {\n  return (\n    <div className={styles.ColClues}>\n      {clues.map((c, ci) => (\n        <div key={c + ':' + ci}>\n          {c.map((clue, cluei) => (\n            <div key={ci + '' + cluei}>{clue}</div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ColClues;\n","import React from 'react';\n\nimport styles from './Clues.module.css';\n\ntype RowCluesProps = {\n  clues: number[][];\n};\n\nconst RowClues = ({ clues }: RowCluesProps) => {\n  return (\n    <div className={styles.RowClues}>\n      {clues.map((c, ci) => (\n        <div key={c + ':' + ci}>\n          {c.map((clue, cluei) => (\n            <div key={ci + '' + cluei}>{clue}</div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default RowClues;\n","import React from 'react';\n\nimport { GameArr } from '../../models/GameArr';\n\ntype GridPreviewProps = {\n  gameArr: GameArr;\n};\n\nconst GridPreview = ({ gameArr }: GridPreviewProps) => {\n  return <div />;\n};\n\nexport default GridPreview;\n","import React, { KeyboardEventHandler, useEffect, useState } from 'react';\n\nimport { randElement } from '../../helpers/helpers';\nimport { encodePuzzleArr } from '../../helpers/puzzleEncoder';\nimport { blankGameArrForPuzzle, blankGameArrFromDimensions, GameArr, hasErrors } from '../../models/GameArr';\nimport Puzzle, { PuzzleArr } from '../../models/Puzzle';\nimport puzzles from '../../resources/puzzles';\nimport CellGrid from '../CellGrid/CellGrid';\nimport ColClues from '../Clues/ColClues';\nimport RowClues from '../Clues/RowClues';\nimport GridPreview from '../GridPreview/GridPreview';\nimport styles from './Game.module.css';\n\nexport const CREATE_MODE = false;\nconst puzzle = CREATE_MODE\n  ? new Puzzle(blankGameArrFromDimensions(15, 15) as PuzzleArr)\n  : new Puzzle(randElement(puzzles));\n\n// Timer, puzzle and puzzle selection?\nconst Game: React.FC = () => {\n  const [gameArr, setGameArr] = useState(blankGameArrForPuzzle(puzzle) as GameArr);\n  const isSolved = !hasErrors(gameArr, puzzle);\n  // console.debug(gameArr);\n  useEffect(() => {\n    if (isSolved) {\n      console.log(puzzle.name, 'SOLVED!');\n    }\n  }, [isSolved]);\n\n  const handleKeyPress: KeyboardEventHandler = ev => {\n    if (ev.key === '~' && gameArr) {\n      console.log(encodePuzzleArr(gameArr));\n    }\n  };\n\n  return (\n    <div className={styles.Game} tabIndex={0} onKeyPress={handleKeyPress}>\n      <GridPreview gameArr={gameArr} />\n      <ColClues clues={puzzle.clues.colClues} />\n      <RowClues clues={puzzle.clues.rowClues} />\n      <CellGrid isSolved={isSolved} gameArr={gameArr} setGameArr={setGameArr} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\n\nimport styles from './App.module.css';\nimport Game from './components/Game/Game';\n\n// overall structure, including header, footer, website stuff\nconst App: React.FC = () => {\n  return (\n    <div className={styles.App}>\n      <header className={styles.AppHeader}>Nonograms</header>\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}