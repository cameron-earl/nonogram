{"version":3,"sources":["components/Clues/Clues.module.css","components/Cell/Cell.module.css","components/CellGrid/CellGrid.module.css","App.module.css","components/X/X.module.css","components/Game/Game.module.css","models/CellValue.ts","helpers/helpers.ts","models/ClickType.ts","helpers/puzzleEncoder.ts","models/GameArr.ts","models/Puzzle.ts","resources/puzzles.ts","models/Edge.ts","helpers/getNewVal.ts","components/X/index.tsx","components/X/X.tsx","components/Cell/Cell.tsx","components/CellGrid/CellGrid.tsx","helpers/evaluateClues.ts","components/Clues/Clue.tsx","components/Clues/ColClues.tsx","components/Clues/RowClues.tsx","components/GridPreview/GridPreview.tsx","components/Game/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","CellValue","isWithin","lim1","lim2","n","ClickType","nToSymbol","String","fromCharCode","symbolToN","s","charCodeAt","splitToLen","str","len","regExp","RegExp","match","binTo64","b","length","Error","parseInt","encodePuzzleArr","binArr","rows","cols","bin","nearest6","Math","ceil","fullBin","padStart","map","join","fromBin","arr","val","Unknown","Empty","decodePuzzleArr","b64","slice","split","c","toString","toSixBitBinary","duplicateArr","r","Puzzle","p","name","clues","Array","isArray","this","puzzle","buildClues","rowClues","row","cluesForLine","colClues","_","i","cluesForCol","col","line","push","num","Black","borrowed","original","puzzles","Edge","getNewVal","currentVal","clickType","left","right","newVal","console","debug","X","className","styles","viewBox","d","Cell","React","memo","coord","clickable","value","handleMouseDown","handleMouseOver","selected","newValClass","cellClassNames","classNames","e","draggable","onDragStart","preventDefault","onMouseDown","ev","onMouseOver","onContextMenu","CellGrid","gameArr","setGameArr","isSolved","useState","mouseDown","setMouseDown","mouseOver","setMouseOver","setNewVal","button","handleMouseUp","newArr","coord1","coord2","sort","a","minR","maxR","minC","maxC","updateGameArrRange","getSelectedEdges","edges","isSelected","min","max","topRow","leftCol","bottomRow","rightCol","top","bottom","cells","ri","key","ci","unsolved","onMouseUp","onMouseLeave","mapCompletedClues","vals","generatedClues","every","completed","fromStart","fromEnd","flipI","Clue","complete","clueClassNames","ColClues","completeArr","clue","cluei","RowClues","GridPreview","CREATE_MODE","fill","floor","random","randElement","Game","pVal","hasErrors","useEffect","log","tabIndex","onKeyPress","App","AppHeader","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.280d280f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ColClues\":\"Clues_ColClues__2Romi\",\"RowClues\":\"Clues_RowClues__1Qm5X\",\"Clue\":\"Clues_Clue__3GqRj\",\"incorrect\":\"Clues_incorrect__3lo5x\",\"complete\":\"Clues_complete__3TYTS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Cell_Cell__JGzUO\",\"selectUnknown\":\"Cell_selectUnknown__1Bym8\",\"selectEmpty\":\"Cell_selectEmpty__35FUd\",\"selectBlack\":\"Cell_selectBlack__V-G-D\",\"clickable\":\"Cell_clickable__3ZAG9\",\"Unknown\":\"Cell_Unknown__3USQO\",\"Empty\":\"Cell_Empty__2sjFK\",\"Black\":\"Cell_Black__ecr59\",\"top\":\"Cell_top__2Gyux\",\"bottom\":\"Cell_bottom__1G-3X\",\"left\":\"Cell_left__1cuDS\",\"right\":\"Cell_right__lVBPk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CellGrid\":\"CellGrid_CellGrid__8cfMJ\",\"isSolved\":\"CellGrid_isSolved__vCLhI\",\"row\":\"CellGrid_row__2jJyw\",\"unsolved\":\"CellGrid_unsolved__1Puss\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16ZpL\",\"AppHeader\":\"App_AppHeader__2Hhu3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"X\":\"X_X__25fxN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game_Game__2P9KR\"};","enum CellValue {\n  Unknown = -1,\n  Empty = 0,\n  Black = 1,\n}\n\nexport default CellValue;\n","export const isWithin = (lim1: number, lim2: number, n: number): boolean =>\n  lim1 < lim2 ? lim1 <= n && n <= lim2 : lim2 <= n && n <= lim1;\n\nexport const randInt = (min: number, max: number): number => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const randElement = <T>(a: T[]): T => a[randInt(0, a.length - 1)];\n","enum ClickType {\n  left,\n  middle,\n  right,\n}\n\nexport default ClickType;\n","import CellValue from '../models/CellValue';\nimport { GameArr } from '../models/GameArr';\nimport { PuzzleArr } from '../models/Puzzle';\n\nconst nToSymbol = (n: number): string => String.fromCharCode(n + 383);\nconst symbolToN = (s: string): number => s.charCodeAt(0) - 383;\n\nconst splitToLen = (str: string, len: number): string[] => {\n  const regExp = new RegExp(`.{1,${len}}`, 'g');\n  const arr = str.match(regExp);\n  return arr || [str];\n};\n\nconst binTo64 = (b: string): string => {\n  if (b.length > 6) {\n    throw new Error(`String \"${b}\" is more than 6 digits, cannot parse to num 0-63.`);\n  }\n  return nToSymbol(parseInt(b, 2));\n};\n\nconst toSixBitBinary = (n: number): string => {\n  if (n < 0 || n >= 64) {\n    throw new Error('Number must be 0 - 63');\n  }\n  return n.toString(2).padStart(6, '0');\n};\n\nconst fromBin = (bin: string) => {\n  const len = bin.length;\n  const nearest6 = Math.ceil(len / 6) * 6;\n  const fullBin = bin.padStart(nearest6, '0');\n  const encoded = splitToLen(fullBin, 6)\n    .map(binTo64)\n    .join('');\n\n  return encoded;\n};\n\nexport const encodePuzzleArr = (binArr: GameArr): string => {\n  const rows = binArr.length;\n  const cols = binArr[0].length;\n  const binStr = binArr\n    .map(arr => arr.map(val => (val === CellValue.Unknown ? CellValue.Empty : val)).join(''))\n    .join('');\n  return fromBin(binStr) + nToSymbol(rows) + nToSymbol(cols);\n};\n\nexport const decodePuzzleArr = (b64: string): PuzzleArr => {\n  const [rows, cols] = b64\n    .slice(-2)\n    .split('')\n    .map(symbolToN);\n  const str = b64\n    .slice(0, b64.length - 2)\n    .split('')\n    .map(c => toSixBitBinary(symbolToN(c)))\n    .join('')\n    .slice(-1 * rows * cols);\n  return splitToLen(str, cols).map(s => s.split('').map(n => +n as (0 | 1)));\n};\n","import { CREATE_MODE } from '../components/Game/Game';\nimport CellValue from './CellValue';\nimport Coord from './Coord';\nimport Puzzle from './Puzzle';\n\nexport type GameArr = CellValue[][];\n\nexport const duplicateArr = (arr: GameArr): GameArr => arr.map(r => [...r]);\n\nexport const getColumn = (arr: GameArr, col: number) => arr.map(r => r[col]);\n\nexport const updateGameArrCell = (arr: GameArr, [r, c]: Coord, val: CellValue): GameArr => {\n  const newArr = duplicateArr(arr);\n  newArr[r][c] = val;\n  return newArr;\n};\n\nexport const updateGameArrRange = (arr: GameArr, coord1: Coord, coord2: Coord, val: CellValue): GameArr => {\n  const [minR, maxR] = [coord1[0], coord2[0]].sort((a, b) => a - b);\n  const [minC, maxC] = [coord1[1], coord2[1]].sort((a, b) => a - b);\n  const newArr = duplicateArr(arr);\n  for (let r = minR; r <= maxR; r++) {\n    for (let c = minC; c <= maxC; c++) {\n      if (arr[r][c] === CellValue.Unknown || val === CellValue.Unknown) {\n        newArr[r][c] = val;\n      }\n    }\n  }\n  return newArr;\n};\n\nexport const hasErrors = (arr: GameArr, puzzle: Puzzle): boolean => {\n  if (CREATE_MODE) return true;\n  for (let r = 0; r < arr.length; r++) {\n    for (let c = 0; c < arr[r].length; c++) {\n      const val = arr[r][c];\n      const pVal = puzzle.arr[r][c];\n      if ((pVal === CellValue.Black || val === CellValue.Black) && val !== pVal) return true;\n    }\n  }\n  return false;\n};\n\nexport const blankGameArrForPuzzle = (puzzle: Puzzle): GameArr => puzzle.arr.map(r => r.map(c => CellValue.Unknown));\n\nexport const blankGameArrFromDimensions = (rows: number, cols: number): GameArr =>\n  new Array(rows).fill(null).map(r => new Array(cols).fill(CellValue.Unknown));\n","import { decodePuzzleArr } from '../helpers/puzzleEncoder';\nimport { StoredPuzzle } from '../resources/puzzles';\nimport CellValue from './CellValue';\nimport GameClues from './GameClues';\n\nexport type PuzzleArr = (CellValue.Empty | CellValue.Black)[][];\n\nclass Puzzle {\n  arr: PuzzleArr;\n  name: string;\n  clues: GameClues;\n\n  constructor(p: StoredPuzzle | PuzzleArr) {\n    if (Array.isArray(p)) {\n      this.arr = p;\n      this.name = 'unknown';\n    } else {\n      this.arr = decodePuzzleArr(p.puzzle);\n      this.name = p.name;\n    }\n    this.clues = Puzzle.buildClues(this.arr);\n  }\n\n  private static buildClues(arr: PuzzleArr): GameClues {\n    const rowClues: number[][] = arr.map(row => Puzzle.cluesForLine(row));\n    const colClues: number[][] = arr[0].map((_, i) => Puzzle.cluesForCol(arr, i));\n    return { rowClues: rowClues, colClues: colClues };\n  }\n\n  private static cluesForCol(arr: PuzzleArr, col: number): number[] {\n    let line: CellValue[] = [];\n    for (let row = 0; row < arr.length; row++) {\n      line.push(arr[row][col]);\n    }\n    return this.cluesForLine(line);\n  }\n\n  static cluesForLine(line: CellValue[]) {\n    const clues: number[] = [];\n\n    for (let i = 0; i < line.length; i++) {\n      let num = 0;\n      while (!num && line[i] < CellValue.Black) {\n        i++;\n      }\n      while (line[i] >= CellValue.Black) {\n        num++;\n        i++;\n      }\n      if (num) {\n        clues.push(num);\n      }\n    }\n    return clues;\n  }\n}\n\nexport default Puzzle;\n","export type StoredPuzzle = {\n  name: string;\n  puzzle: string;\n};\n\nconst p = (name: string, puzzle: string): StoredPuzzle => ({ name, puzzle });\n\nconst borrowed: StoredPuzzle[] = [\n  p('pi', 'ƀƼƑƤƊƄƄ'),\n  p('house', 'ſƐƶƹƶƄƄ'),\n  p('heart', 'ƀƮƾƶƃƄƄ'),\n  p('arrow', 'ſƐƆƳƃƄƄ'),\n  p('skull', 'ſƺƼƞƩƄƄ'),\n  p('plane', 'ſƒƾƱƍƄƄ'),\n  p('cross', 'ſƺƛƜƭƄƄ'),\n  p('tower', 'ƀƖƺƤƍƄƄ'),\n  p('hourglass', 'ƀƼƐƆƞƄƄ'),\n  p('shuriken', 'ƀƎƱƦƸƄƄ'),\n  p('tulip', 'ƔƾƼưƉƭƆƄ'),\n  p('yin yang', 'ſƛƒƔƸƻƬƛƛƆƆ'),\n  p('leaf', 'ſƾƄƓƴƤƙƔƸƗƦƽƇƐƝƋſƉƉ'),\n  p('music', 'ſƎƆƃƐưƸƃƃƐƶƎƻƾưƥſƉƉ'),\n  p('cat', 'ƈſƻƀƏƾƁƾƈƽƦƹƞƨƽƦƽƉƉ'),\n  p('tapir', 'ƎƾƯſſƾſſƞƷſƎƽƗƂƸƽƀƼƮſƞƮƷƎƾƾƂƾƾƯƾƽƻƎƶƾƂƼƾƯƞƮƻƾƼƾƸƲƢƻƛƷƞƆƍƂưƲƟƻƛƷƎƦƮſƓƓ'),\n];\n\nconst original: StoredPuzzle[] = [p('smiley', 'ſƨƏƇƭƄƄ'), p('vampire', 'ƆƺƾƥƘƦƦƞƢƯƣƇƇ')];\n\nconst puzzles = [...borrowed, ...original];\n\nexport default puzzles;\n","enum Edge {\n  top,\n  bottom,\n  left,\n  right,\n}\nexport default Edge;\n","import CellValue from '../models/CellValue';\nimport ClickType from '../models/ClickType';\n\nconst getNewVal = (currentVal: CellValue, clickType: ClickType): CellValue | null => {\n  if (clickType !== ClickType.left && clickType !== ClickType.right) return null;\n  let newVal: CellValue;\n  if (clickType === ClickType.left) {\n    newVal = currentVal === CellValue.Unknown ? CellValue.Black : CellValue.Unknown;\n  } else {\n    newVal = currentVal === CellValue.Unknown ? CellValue.Empty : CellValue.Unknown;\n  }\n  console.debug(clickType, currentVal, newVal);\n\n  return newVal;\n};\n\nexport default getNewVal;\n","import X from './X';\n\nexport default X;","import React from 'react';\n\nimport styles from './X.module.css';\n\nconst X: React.FC = () => {\n  return (\n    <svg className={styles.X} viewBox=\"0 0 100 100\">\n      <path d=\"M 7,7 L 93,93 M 93,7 L 7,93\" />\n    </svg>\n  );\n};\n\nexport default X;\n","import classNames from 'classnames';\nimport React, { MouseEventHandler } from 'react';\n\nimport CellValue from '../../models/CellValue';\nimport Coord from '../../models/Coord';\nimport Edge from '../../models/Edge';\nimport X from '../X';\nimport styles from './Cell.module.css';\n\ntype CellProps = {\n  handleMouseDown: (ev: React.MouseEvent, coord: Coord) => void;\n  handleMouseOver: (ev: React.MouseEvent, coord: Coord) => void;\n  coord: Coord;\n  selected: Edge[];\n\n  newVal: CellValue | null;\n\n  clickable: boolean;\n  value: CellValue;\n};\n\nconst Cell = React.memo(\n  ({ coord, clickable, value, handleMouseDown, handleMouseOver, selected, newVal }: CellProps) => {\n    const newValClass = newVal !== null ? styles['select' + CellValue[newVal]] : '';\n    const cellClassNames = classNames(\n      { [styles.clickable]: clickable },\n      newValClass,\n      selected.map(e => styles[Edge[e]]),\n      styles.Cell\n    );\n\n    const handleContextMenu: MouseEventHandler = ev => {\n      ev.preventDefault();\n      handleMouseDown(ev, coord);\n    };\n\n    return (\n      <div draggable={false} className={cellClassNames}>\n        <div\n          onDragStart={e => e.preventDefault()}\n          draggable={false}\n          className={styles[CellValue[value]]}\n          onMouseDown={ev => handleMouseDown(ev, coord)}\n          onMouseOver={ev => handleMouseOver(ev, coord)}\n          onContextMenu={handleContextMenu}\n        >\n          {value === CellValue.Empty && <X />}\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Cell;\n","import classNames from 'classnames';\nimport React, { MouseEventHandler, useState } from 'react';\n\nimport getNewVal from '../../helpers/getNewVal';\nimport { isWithin } from '../../helpers/helpers';\nimport CellValue from '../../models/CellValue';\nimport Coord from '../../models/Coord';\nimport Edge from '../../models/Edge';\nimport { GameArr, updateGameArrRange } from '../../models/GameArr';\nimport Cell from '../Cell/Cell';\nimport styles from './CellGrid.module.css';\n\ntype CellGridProps = {\n  gameArr: GameArr;\n  setGameArr: (arg0: GameArr) => void;\n  isSolved: boolean;\n};\n\n// puzzle solution progress\nconst CellGrid = ({ gameArr, setGameArr, isSolved }: CellGridProps) => {\n  const [mouseDown, setMouseDown] = useState(null as (Coord | null));\n  const [mouseOver, setMouseOver] = useState(null as Coord | null);\n  const [newVal, setNewVal] = useState(null as CellValue | null);\n\n  const handleMouseDown = (ev: React.MouseEvent, coord: Coord): void => {\n    if (isSolved) return;\n    setMouseDown(coord);\n    setNewVal(getNewVal(gameArr[coord[0]][coord[1]], ev.button));\n  };\n\n  const handleMouseUp: MouseEventHandler = ev => {\n    if (newVal !== null && mouseDown !== null) {\n      const newArr = updateGameArrRange(gameArr, mouseDown, mouseOver || mouseDown, newVal);\n      setGameArr(newArr);\n    }\n    setMouseDown(null);\n    setMouseOver(null);\n  };\n\n  const handleMouseOver = (ev: React.MouseEvent, coord: Coord): void => {\n    if (!mouseDown) return;\n    setMouseOver(coord);\n  };\n\n  const isSelected = ([row, col]: Coord): boolean => {\n    if (!mouseDown) return false;\n    if (!mouseOver) return row === mouseDown[0] && col === mouseDown[1];\n    return isWithin(mouseDown[0], mouseOver[0], row) && isWithin(mouseDown[1], mouseOver[1], col);\n  };\n\n  const getSelectedEdges = ([row, col]: Coord): Edge[] => {\n    let edges: Edge[] = [];\n    if (!mouseDown || !isSelected([row, col])) return edges;\n    const [topRow, leftCol, bottomRow, rightCol] = mouseOver\n      ? [\n          Math.min(mouseDown[0], mouseOver[0]),\n          Math.min(mouseDown[1], mouseOver[1]),\n          Math.max(mouseDown[0], mouseOver[0]),\n          Math.max(mouseDown[1], mouseOver[1]),\n        ]\n      : [mouseDown[0], mouseDown[1], mouseDown[0], mouseDown[1]];\n    if (row === topRow) edges.push(Edge.top);\n    if (col === leftCol) edges.push(Edge.left);\n    if (row === bottomRow) edges.push(Edge.bottom);\n    if (col === rightCol) edges.push(Edge.right);\n    return edges;\n  };\n\n  const cells = gameArr.map((r, ri) => (\n    <div className={styles.row} key={r.toString() + ri}>\n      {r.map((c, ci) => (\n        <Cell\n          coord={[ri, ci]}\n          newVal={newVal}\n          clickable={!isSolved}\n          handleMouseDown={handleMouseDown}\n          handleMouseOver={handleMouseOver}\n          value={isSolved && c === CellValue.Empty ? CellValue.Unknown : c}\n          selected={getSelectedEdges([ri, ci])}\n          key={`${ri},${ci}`}\n        />\n      ))}\n    </div>\n  ));\n\n  return (\n    <div\n      className={classNames({ [styles.CellGrid]: true, [styles.isSolved]: isSolved, [styles.unsolved]: !isSolved })}\n      onMouseUp={handleMouseUp}\n      onMouseLeave={handleMouseUp}\n    >\n      {cells}\n    </div>\n  );\n};\n\nexport default CellGrid;\n","import CellValue from '../models/CellValue';\nimport Puzzle from '../models/Puzzle';\n\nexport const mapCompletedClues = (clues: number[], vals: CellValue[]): boolean[] => {\n  const generatedClues = Puzzle.cluesForLine(vals);\n\n  if (generatedClues.length === clues.length && generatedClues.every((c, i) => c === clues[i])) {\n    return clues.map(c => true);\n  }\n\n  const completed = clues.map(c => false);\n\n  const fromStart = [0];\n\n  for (let val of vals) {\n    if (val === -1) break;\n    if (val > 0) fromStart[fromStart.length - 1]++;\n    if (val === 0 && fromStart[fromStart.length - 1]) fromStart.push(0);\n  }\n\n  for (let i = 0; i < fromStart.length; i++) {\n    if (fromStart[i] === clues[i]) completed[i] = true;\n  }\n\n  const fromEnd = [0];\n\n  for (let i = vals.length - 1; i >= 0; i--) {\n    const val = vals[i];\n    if (val === -1) break;\n    if (val > 0) fromEnd[fromEnd.length - 1]++;\n    if (val === 0 && fromEnd[fromEnd.length - 1]) fromEnd.push(0);\n  }\n\n  for (let i = 0; i < fromEnd.length; i++) {\n    const flipI = clues.length - i - 1;\n    if (fromEnd[i] === clues[flipI]) completed[flipI] = true;\n  }\n\n  return completed;\n};\n","import classNames from 'classnames';\nimport React from 'react';\n\nimport styles from './Clues.module.css';\n\ntype ClueProps = {\n  val: number;\n  complete: boolean;\n};\n\nconst Clue = ({ val, complete }: ClueProps) => {\n  const clueClassNames = classNames(styles.Clue, { [styles.complete]: complete });\n  return <div className={clueClassNames}>{val}</div>;\n};\n\nexport default Clue;\n","import React from 'react';\n\nimport { mapCompletedClues } from '../../helpers/evaluateClues';\nimport { GameArr, getColumn } from '../../models/GameArr';\nimport Clue from './Clue';\nimport styles from './Clues.module.css';\n\ntype ColCluesProps = {\n  clues: number[][];\n  gameArr: GameArr;\n};\n\nconst ColClues = ({ clues, gameArr }: ColCluesProps) => {\n  const completeArr = clues.map((colClues, i) => mapCompletedClues(colClues, getColumn(gameArr, i)));\n  return (\n    <div className={styles.ColClues}>\n      {clues.map((c, ci) => (\n        <div key={c + ':' + ci}>\n          {c.map((clue, cluei) => (\n            <Clue key={ci + '' + cluei} val={clue} complete={completeArr[ci][cluei]} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default ColClues;\n","import React from 'react';\n\nimport { mapCompletedClues } from '../../helpers/evaluateClues';\nimport { GameArr } from '../../models/GameArr';\nimport Clue from './Clue';\nimport styles from './Clues.module.css';\n\ntype RowCluesProps = {\n  clues: number[][];\n  gameArr: GameArr;\n};\n\nconst RowClues = ({ clues, gameArr }: RowCluesProps) => {\n  const completeArr = clues.map((rowClues, i) => mapCompletedClues(rowClues, gameArr[i]));\n  return (\n    <div className={styles.RowClues}>\n      {clues.map((c, ci) => (\n        <div key={c + ':' + ci}>\n          {c.map((clue, cluei) => (\n            <Clue key={ci + '' + cluei} val={clue} complete={completeArr[ci][cluei]} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default RowClues;\n","import React from 'react';\n\nimport { GameArr } from '../../models/GameArr';\n\ntype GridPreviewProps = {\n  gameArr: GameArr;\n};\n\nconst GridPreview = ({ gameArr }: GridPreviewProps) => {\n  return <div />;\n};\n\nexport default GridPreview;\n","import React, { KeyboardEventHandler, useEffect, useState } from 'react';\n\nimport { randElement } from '../../helpers/helpers';\nimport { encodePuzzleArr } from '../../helpers/puzzleEncoder';\nimport { blankGameArrForPuzzle, blankGameArrFromDimensions, GameArr, hasErrors } from '../../models/GameArr';\nimport Puzzle, { PuzzleArr } from '../../models/Puzzle';\nimport puzzles from '../../resources/puzzles';\nimport CellGrid from '../CellGrid/CellGrid';\nimport ColClues from '../Clues/ColClues';\nimport RowClues from '../Clues/RowClues';\nimport GridPreview from '../GridPreview/GridPreview';\nimport styles from './Game.module.css';\n\nexport const CREATE_MODE = false;\nconst puzzle = CREATE_MODE\n  ? new Puzzle(blankGameArrFromDimensions(10, 10) as PuzzleArr)\n  : new Puzzle(randElement(puzzles));\n\n// Timer, puzzle and puzzle selection?\nconst Game: React.FC = () => {\n  const [gameArr, setGameArr] = useState(blankGameArrForPuzzle(puzzle) as GameArr);\n  const isSolved = !hasErrors(gameArr, puzzle);\n  useEffect(() => {\n    if (isSolved) {\n      console.log(puzzle.name, 'SOLVED!');\n    }\n  }, [isSolved]);\n\n  const handleKeyPress: KeyboardEventHandler = ev => {\n    if (ev.key === '~' && gameArr) {\n      console.log(encodePuzzleArr(gameArr));\n    }\n  };\n\n  return (\n    <div className={styles.Game} tabIndex={0} onKeyPress={handleKeyPress}>\n      <GridPreview gameArr={gameArr} />\n      <ColClues clues={puzzle.clues.colClues} gameArr={gameArr} />\n      <RowClues clues={puzzle.clues.rowClues} gameArr={gameArr} />\n      <CellGrid isSolved={isSolved} gameArr={gameArr} setGameArr={setGameArr} />\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\n\nimport styles from './App.module.css';\nimport Game from './components/Game/Game';\n\n// overall structure, including header, footer, website stuff\nconst App: React.FC = () => {\n  return (\n    <div className={styles.App}>\n      <header className={styles.AppHeader}>Nonograms</header>\n      <Game />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}